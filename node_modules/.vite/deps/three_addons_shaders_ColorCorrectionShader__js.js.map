{
  "version": 3,
  "sources": ["../../three/examples/jsm/shaders/ColorCorrectionShader.js"],
  "sourcesContent": ["import {\r\n\tVector3\r\n} from 'three';\r\n\r\n/**\r\n * Color correction\r\n */\r\n\r\nconst ColorCorrectionShader = {\r\n\r\n\tname: 'ColorCorrectionShader',\r\n\r\n\tuniforms: {\r\n\r\n\t\t'tDiffuse': { value: null },\r\n\t\t'powRGB': { value: new Vector3( 2, 2, 2 ) },\r\n\t\t'mulRGB': { value: new Vector3( 1, 1, 1 ) },\r\n\t\t'addRGB': { value: new Vector3( 0, 0, 0 ) }\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\tuniform sampler2D tDiffuse;\r\n\t\tuniform vec3 powRGB;\r\n\t\tuniform vec3 mulRGB;\r\n\t\tuniform vec3 addRGB;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tgl_FragColor = texture2D( tDiffuse, vUv );\r\n\t\t\tgl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );\r\n\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { ColorCorrectionShader };\r\n"],
  "mappings": ";;;;;;AAQA,IAAM,wBAAwB;AAAA,EAE7B,MAAM;AAAA,EAEN,UAAU;AAAA,IAET,YAAY,EAAE,OAAO,KAAK;AAAA,IAC1B,UAAU,EAAE,OAAO,IAAI,QAAS,GAAG,GAAG,CAAE,EAAE;AAAA,IAC1C,UAAU,EAAE,OAAO,IAAI,QAAS,GAAG,GAAG,CAAE,EAAE;AAAA,IAC1C,UAAU,EAAE,OAAO,IAAI,QAAS,GAAG,GAAG,CAAE,EAAE;AAAA,EAE3C;AAAA,EAEA;AAAA;AAAA,IAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYxB;AAAA;AAAA,IAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB3B;",
  "names": []
}
